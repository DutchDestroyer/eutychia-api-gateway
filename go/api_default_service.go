/*
 * Test api for project
 *
 * This api is a test version to connect the backend and frontend
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"crypto/rand"
	"errors"
	"net/http"

	"github.com/DutchDestroyer/eutychia-api-gateway/services"
	"github.com/DutchDestroyer/eutychia-api-gateway/services/account"
	"github.com/DutchDestroyer/eutychia-api-gateway/services/authentication"
	projects "github.com/DutchDestroyer/eutychia-api-gateway/services/project"
)

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	return &DefaultApiService{}
}

//GetAllTests
func (s *DefaultApiService) GetAllTests(ctx context.Context, accountID string) (ImplResponse, error) {
	if !services.IsCorrectUUID(accountID) {
		return Response(http.StatusBadRequest, nil), errors.New("Incorrect data provided by client")
	}

	var allTests = []TestsForAccount{
		{
			TestID:   "7b43fcf0-be12-4f91-8baa-fcdcac8118d5",
			TestName: "test 1",
		},
		{
			TestID:   "7b43fcf0-be12-4f91-8baa-fcdcac8118d6",
			TestName: "test 2",
		},
		{
			TestID:   "7b43fcf0-be12-4f91-8baa-fcdcac8118d7",
			TestName: "test 3",
		},
	}

	return Response(http.StatusOK, allTests), nil
}

//CreatesNewProject
func (s *DefaultApiService) CreatesNewProject(ctx context.Context, accountID string, createProject CreateProject) (ImplResponse, error) {
	// TODO - update CreateNewAccount with the required logic for this service method.
	if !services.IsCorrectUUID(accountID) {
		return Response(http.StatusBadRequest, nil), errors.New("Incorrect data provided by client")
	}
	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	return Response(http.StatusOK, nil), nil
}

// CreateNewAccount -
func (s *DefaultApiService) CreateNewAccount(ctx context.Context, accountCreation AccountCreation) (ImplResponse, error) {
	// TODO - update CreateNewAccount with the required logic for this service method.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("CreateNewAccount method not implemented")
}

// DeleteAccountByID -
func (s *DefaultApiService) DeleteAccountByID(ctx context.Context, accountID string) (ImplResponse, error) {
	// TODO - update DeleteAccountByID with the required logic for this service method.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	//TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	//return Response(401, nil),nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteAccountByID method not implemented")
}

// GetAccountByID -
func (s *DefaultApiService) GetAccountByID(ctx context.Context, accountID string) (ImplResponse, error) {
	// TODO - update GetAccountByID with the required logic for this service method.

	if !services.IsCorrectUUID(accountID) {
		return Response(http.StatusBadRequest, nil), errors.New("Incorrect data provided by client")
	}

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	//return Response(401, nil),nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	return Response(http.StatusOK, GetAccountIdResponse{ID: "7b43fcf0-be12-4f91-8baa-fcdcac8118d5", Name: "Mark Wijnbergen", Email: "markwijnbergen@hey.com"}), nil
}

// GetGenericTestOfProject -
func (s *DefaultApiService) GetGenericTestOfProject(ctx context.Context, projectID string, testID string) (ImplResponse, error) {
	// TODO - update GetGenericTestOfProject with the required logic for this service method.

	if !services.IsCorrectUUID(projectID) || !services.IsCorrectUUID(testID) {
		return Response(http.StatusBadRequest, nil), errors.New("Incorrect data provided by client")
	}

	var genericTestQuestions = []GenericTestQuestions{
		{
			Question:     "What is your favorite food?",
			QuestionType: "multipleChoice",
			Answers:      []string{"Pizza", "Pasta", "Burger", "Steak", "Something else"},
		},
		{
			Question:     "How are  you feeling today?",
			QuestionType: "slider",
			Answers:      []string{"very bad", "bad", "normal", "good", "awesome"},
		},
		{
			Question:     "What is the best experience so far today?",
			QuestionType: "openQuestion",
			Answers:      nil,
		},
	}

	return Response(http.StatusOK,
		GenericTest{Title: "Title of generic test",
			Description:    "Description of the test bla bla bla",
			DisplayAnswers: true,
			FinalRemark:    "This is the final remark, thanks for performing the test!",
			Questions:      genericTestQuestions,
		}), nil
}

// GetProjectsOfAccount -
func (s *DefaultApiService) GetProjectsOfAccount(ctx context.Context, accountID string) (ImplResponse, error) {
	// TODO - update GetProjectsOfAccount with the required logic for this service method.

	if !services.IsCorrectUUID(accountID) {
		return Response(http.StatusBadRequest, nil), errors.New("Incorrect data provided by client")
	}

	projects, err := projects.GetProjectsAsParticipantForAccount(accountID)

	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	var projectsToReturn []Project

	for i := range projects {
		projectsToReturn = append(projectsToReturn, Project{projects[i].ID, projects[i].Name})
	}

	return Response(http.StatusOK, ProjectsAccountId{Projects: projectsToReturn}), nil
}

// GetTestsToPerformByAccount -
func (s *DefaultApiService) GetTestsToPerformByAccount(ctx context.Context, projectID string, accountID string) (ImplResponse, error) {

	if !services.IsCorrectUUID(projectID) || !services.IsCorrectUUID(accountID) {
		return Response(http.StatusBadRequest, nil), errors.New("Incorrect data provided by client")
	}

	tests, errTests := projects.GetTestsOfProject(projectID)

	if errTests != nil {
		return Response(http.StatusInternalServerError, nil), errTests
	}

	var testProjects []Test

	for i := range tests {
		testProjects = append(testProjects, Test{tests[i].ID, tests[i].Name, tests[i].Type})
	}

	return Response(http.StatusOK, TestsProject{TestsToPerform: testProjects}), nil
}

func newRandomKey() []byte {
	key := make([]byte, 32)
	if _, err := rand.Read(key); err != nil {
		// really, what are you gonna do if randomness failed?
		panic(err)
	}

	return key
}

// LogInWithAccount -
func (s *DefaultApiService) LogInWithAccount(ctx context.Context, loginAccount LoginAccount) (ImplResponse, error) {

	// create the account
	account := account.CreateAccount(loginAccount.EmailAddress, loginAccount.Password, loginAccount.RefreshToken, loginAccount.AccountID, loginAccount.SessionID)

	// validate the account is correct
	if loginAccount.GrantType == "password" {
		// Validate password and obtain accountID of account
		accountDAO, validationError := authentication.IsValidPasswordLogin(*account)
		if validationError != nil {
			return Response(http.StatusUnauthorized, nil), validationError
		}

		// assign account ID
		account.AccountID = accountDAO.AccountID
		account.AccountType = accountDAO.AccountType

		// Create authentication for account
		authError := authentication.CreateAccountAuthentication(account)

		if authError != nil {
			return Response(http.StatusInternalServerError, nil), authError
		}
	} else if loginAccount.GrantType == "refreshToken" {
		validationError := authentication.IsValidTokenLogin(*account)
		if validationError != nil {
			return Response(http.StatusUnauthorized, nil), validationError
		}

		// Create new authtoken for account
		authError := authentication.UpdateAccountAuthentication(account)
		if authError != nil {
			return Response(http.StatusInternalServerError, nil), authError
		}
	} else {
		return Response(http.StatusBadRequest, nil), errors.New("grant type not recognized")
	}

	return Response(http.StatusOK,
		AccountDetails{account.AccountID, account.SessionID, account.AuthToken, account.RefreshToken, account.AccountType}), nil
}

// LogOutWithAccount -
func (s *DefaultApiService) LogOutWithAccount(ctx context.Context, logoutAccount LogoutAccount) (ImplResponse, error) {
	// TODO - update LogOutWithAccount with the required logic for this service method.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("LogOutWithAccount method not implemented")
}

// RefreshAccessToken -
func (s *DefaultApiService) RefreshAccessToken(ctx context.Context, refreshDetails RefreshDetails) (ImplResponse, error) {

	// TODO - update RefreshAccessToken with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, AccountDetails{}) or use other options such as http.Ok ...
	//return Response(200, JwtAccountDetails{}), nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	//return Response(401, nil),nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("RefreshAccessToken method not implemented")
}

// SendEmailForSignUp -
func (s *DefaultApiService) SendEmailForSignUp(ctx context.Context, signUp SignUp) (ImplResponse, error) {
	// TODO - update SendEmailForSignUp with the required logic for this service method.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("SendEmailForSignUp method not implemented")
}

// SubmitAnswerToTest -
func (s *DefaultApiService) SubmitAnswerToTest(ctx context.Context, projectID string, testID string, genericTestAnswers GenericTestAnswers) (ImplResponse, error) {
	// TODO - update SubmitAnswerToTest with the required logic for this service method.

	return Response(http.StatusOK, nil), nil
}
