/*
 * Test api for project
 *
 * This api is a test version to connect the backend and frontend
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"net/http"

	uuidvalidator "github.com/DutchDestroyer/eutychia-api-gateway/services"
)

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	return &DefaultApiService{}
}

// CreateNewAccount -
func (s *DefaultApiService) CreateNewAccount(ctx context.Context, accountCreation AccountCreation) (ImplResponse, error) {
	// TODO - update CreateNewAccount with the required logic for this service method.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("CreateNewAccount method not implemented")
}

// DeleteAccountByID -
func (s *DefaultApiService) DeleteAccountByID(ctx context.Context, accountID string) (ImplResponse, error) {
	// TODO - update DeleteAccountByID with the required logic for this service method.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	//TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	//return Response(401, nil),nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteAccountByID method not implemented")
}

// GetAccountByID -
func (s *DefaultApiService) GetAccountByID(ctx context.Context, accountID string) (ImplResponse, error) {
	// TODO - update GetAccountByID with the required logic for this service method.

	if !uuidvalidator.IsCorrectUUID(accountID) {
		return Response(http.StatusBadRequest, nil), errors.New("Incorrect data provided by client")
	}

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	//return Response(401, nil),nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	return Response(http.StatusOK, GetAccountIdResponse{ID: "7b43fcf0-be12-4f91-8baa-fcdcac8118d5", Name: "Mark Wijnbergen", Email: "markwijnbergen@hey.com"}), nil
}

// GetGenericTestOfProject -
func (s *DefaultApiService) GetGenericTestOfProject(ctx context.Context, projectID string, testID string) (ImplResponse, error) {
	// TODO - update GetGenericTestOfProject with the required logic for this service method.

	if !uuidvalidator.IsCorrectUUID(projectID) || !uuidvalidator.IsCorrectUUID(testID) {
		return Response(http.StatusBadRequest, nil), errors.New("Incorrect data provided by client")
	}

	var genericTestQuestions = []GenericTestQuestions{
		{
			Question:     "What is your favorite food?",
			QuestionType: "multipleChoice",
			Answers:      []string{"Pizza", "Pasta", "Burger", "Steak", "Something else"},
		},
		{
			Question:     "How are  you feeling today?",
			QuestionType: "slider",
			Answers:      []string{"very bad", "bad", "normal", "good", "awesome"},
		},
		{
			Question:     "What is the best experience so far today?",
			QuestionType: "openQuestion",
			Answers:      nil,
		},
	}

	return Response(http.StatusOK,
		GenericTest{Title: "Title of generic test",
			Description:    "Description of the test bla bla bla",
			DisplayAnswers: true,
			FinalRemark:    "This is the final remark, thanks for performing the test!",
			Questions:      genericTestQuestions,
		}), nil
}

// GetProjectsOfAccount -
func (s *DefaultApiService) GetProjectsOfAccount(ctx context.Context, accountID string) (ImplResponse, error) {
	// TODO - update GetProjectsOfAccount with the required logic for this service method.

	if !uuidvalidator.IsCorrectUUID(accountID) {
		return Response(http.StatusBadRequest, nil), errors.New("Incorrect data provided by client")
	}

	var projects = []Project{
		{
			ProjectID:   "7b43fcf0-be12-4f91-8baa-fcdcac8118d5",
			ProjectName: "Project 1",
		},
		{
			ProjectID:   "7b43fcf0-be12-4f91-8baa-fcdcac8118d5",
			ProjectName: "Project 2",
		},
		{
			ProjectID:   "",
			ProjectName: "This should throw an error",
		},
	}

	return Response(200, ProjectsAccountId{Projects: projects}), nil
}

// GetTestsToPerformByAccount -
func (s *DefaultApiService) GetTestsToPerformByAccount(ctx context.Context, projectID string, accountID string) (ImplResponse, error) {
	// TODO - update GetTestsToPerformByAccount with the required logic for this service method.

	if !uuidvalidator.IsCorrectUUID(projectID) || !uuidvalidator.IsCorrectUUID(accountID) {
		return Response(http.StatusBadRequest, nil), errors.New("Incorrect data provided by client")
	}

	var testProjects = []Test{
		{
			TestID:   "7b43fcf0-be12-4f91-8baa-fcdcac8118d5",
			TestName: "Test 1",
			TestType: "generic",
		},
		{
			TestID:   "7b43fcf0-be12-4f91-8baa-fcdcac8118d5",
			TestName: "Test 2",
			TestType: "generic",
		},
		{
			TestID:   "",
			TestName: "Incorrect, should throw error",
			TestType: "generic",
		},
	}

	return Response(http.StatusOK, TestsProject{TestsToPerform: testProjects}), nil
}

// LogInWithAccount -
func (s *DefaultApiService) LogInWithAccount(ctx context.Context, loginAccount LoginAccount) (ImplResponse, error) {
	// TODO - update LogInWithAccount with the required logic for this service method.

	return Response(200, AccountDetails{
		AccountID:    "7b43fcf0-be12-4f91-8baa-fcdcac8118d5",
		AccessToken:  "cdbac82e-3b19-4351-bb82-9feb36327a5a",
		RefreshToken: "21ab4555-17a3-4db7-a814-cacfce5f6e1c"}), nil
}

// LogOutWithAccount -
func (s *DefaultApiService) LogOutWithAccount(ctx context.Context, logoutAccount LogoutAccount) (ImplResponse, error) {
	// TODO - update LogOutWithAccount with the required logic for this service method.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("LogOutWithAccount method not implemented")
}

// SendEmailForSignUp -
func (s *DefaultApiService) SendEmailForSignUp(ctx context.Context, signUp SignUp) (ImplResponse, error) {
	// TODO - update SendEmailForSignUp with the required logic for this service method.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("SendEmailForSignUp method not implemented")
}

// SubmitAnswerToTest -
func (s *DefaultApiService) SubmitAnswerToTest(ctx context.Context, projectID string, testID string, genericTestAnswers GenericTestAnswers) (ImplResponse, error) {
	// TODO - update SubmitAnswerToTest with the required logic for this service method.

	return Response(http.StatusOK, nil), nil
}
